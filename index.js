const { ApolloServer, gql } = require("apollo-server");
const { makeAugmentedSchema } = require("neo4j-graphql-js");
const { v1 } = require("neo4j-driver");

// Construct a schema, using GraphQL schema language
const typeDefs = /* GraphQL */ `
  type Movie {
    movieId: ID!
    title: String
    year: Int
    plot: String
    poster: String
    imdbRating: Float
    ratings: [Rated]
    genres: [Genre] @relation(name: "IN_GENRE", direction: "OUT")
    actors: [Actor] @relation(name: "ACTED_IN", direction: "IN")
  }

  type Genre {
    name: String
    movies: [Movie] @relation(name: "IN_GENRE", direction: "IN")
  }

  type Actor {
    id: ID!
    name: String
    movies: [Movie] @relation(name: "ACTED_IN", direction: "OUT")
  }

  type User {
    userId: ID!
    name: String
    rated: [Rated]
    recommendedMovies: [Movie]
      @cypher(
        statement: """
        MATCH (this)-[:RATED]->(:Movie)<-[:RATED]-(:User)-[:RATED]->(rec:Movie)
        WITH rec, COUNT(*) AS score ORDER BY score DESC LIMIT 10
        RETURN rec
        """
      )
  }

  type Rated @relation(name: "RATED") {
    from: User
    to: Movie
    rating: Float
  }
`;

/* use makeAugmentedSchema from neo4j-graphql-js to
 * auto-generated GraphQL CRUD API from typedefs
 * with auto-generated resolvers for Neo4j
 */

const schema = makeAugmentedSchema({
  typeDefs
});

// Database credentials are stored in environment variables
// Create your own Neo4j instance with the movies dataset at
// neo4jsandbox.com (look for Recommendations use case)
const { NEO4J_URI, NEO4J_USER, NEO4J_PASSWORD } = process.env;

// Create a database driver instance
const driver = new v1.driver(
  NEO4J_URI,
  v1.auth.basic(NEO4J_USER, NEO4J_PASSWORD)
);

// Apollo Server will serve our GraphQL API using the schema
// generated by neo4j-graphql-js's makeAugmentedSchema
const server = new ApolloServer({
  context: { driver },
  schema
});

server.listen().then(({ url }) => {
  console.log(`ğŸš€ Server ready at ${url}`);
});
